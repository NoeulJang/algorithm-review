chapter-1 [시간복잡도]

1. 시간복잡도 유형

Big-O - 최악의 경우를 나타냄 (상한 접근)
  O(n): 최악의 경우 n번까지 수행되면 프로그램을 끝낼 수 있다.
Big-Omega - 최적의 경우를 나타냄 (하한 접근)
  O(n): 최소 n번은 수행되어야 프로그램을 끝낼 수 있다.
Theta  - 평균 (Big-O 와 Big-Omega값의 평균값)

2. 연산 횟수 계산 방법

연산 횟수 = 알고리즘 시간 복잡도 X 데이터 크기

3. 시간 복잡도 도출 기준

1) 상수는 제외
  for 문이 1000번 반복되더라도 시간 복잡도는 O(n)
2) 가장 많이 중첩된 반복문의 수행 횟수가 시간복잡도의 기준
  for 문이 1000번, 3번을 반복하더라도(중첩x) 시간 복잡도는 O(n) 단, 2중 for문이라면 O(n^2)

＊ 연산횟수는 1초에 1억 번 연산하는 것을 기준으로 함

＊ 코딩테스트에서는 Big-O 표기법을 기준으로 수행시간을 계산
  왜 why? for문의 반복수(n)가 1 < n < 100,000,000 이며 제한시간이 2초일 경우 Big_Omega 표기법을 기준으로 잡을 시 제한시간을 넘길 수 있음

* 시간 복잡도 순서
  𝑂(1) < 𝑂(log n) < 𝑂(n) < 𝑂(nlog n) < 𝑂(n^2) < 𝑂(n^3) < 𝑂(2^n) < 𝑂(n!)
