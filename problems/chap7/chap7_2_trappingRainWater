package chap7;

import java.util.ArrayDeque;
import java.util.Deque;

public class chap7_2_trappingRainWater {

    //높이를 입력받아 비 온 후 얼마나 많은 물이 쌓일 수 있는지 계산하라.
    public static void main(String[] args){

        int[] height = {1,1,0,2,1,0,1,3,2,1,2,1};
        System.out.println(trappingRainWater2(height));

    }
    
    //해결 1. 투포인터로 해결, 중앙의 최대 길이 지점까지 포인터를 좁혀온다.
    public static int trappingRainWater1(int[] height) {
        int volume = 0;
        int left = 0;
        int right = height.length - 1;
        int leftMax = height[left];
        int rightMax = height[right];

        //양 포인터가 만날 때 까지
        while(left < right){
            
            //기존 Max값과 현재 탐색하는 포인터중 더 높은 것을 max로
            leftMax = Math.max(height[left], leftMax);
            rightMax = Math.max(height[right], rightMax);

            //left를 탐색하거나 right 둘 중 하나를 탐색하기 위해 leftMax <= rightMax를 조건으로 
            //max값보다 현재 값이 낮으면 그 낮은 값만큼 return 변수에 추가하고 포인터를 좁힘
            if(leftMax <= rightMax){
                volume += leftMax - height[left];
                left += 1;
            } else {
                volume += rightMax - height[right];
                right -= 1;
            }

        }

        return volume;
    }

    //해결 2. 스택으로 해결, 현재 높이가 이전 높이보다 높을 때 (변곡점) 을 이용.
    public static int trappingRainWater2(int[] height) {

        Deque<Integer> stack = new ArrayDeque<>();
        int volume = 0;

        //처음부터 끝까지 순회
        for(int i = 0; i < height.length; i++){
            
            //스택이 비어있지않고 현재 순회하는 배열이 바로 전 스택의 길이보다 높다면
            while (!stack.isEmpty() && height[i] > height[stack.peek()]) {
                //바로 전 스택의 길이를 뽑아낸다.
                Integer top = stack.pop();

                //스택이 빌 때까지 반복
                if(stack.isEmpty()) break;

                //스택의 길이를 계산
                int distance = i - stack.peek() -1;

                
                int waters = Math.min(height[i], height[stack.peek()]) - height[top];

                volume += distance * waters;
            }

            stack.push(i);

        }

        return volume;
    }

} 
