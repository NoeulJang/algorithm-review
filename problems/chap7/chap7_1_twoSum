package chap7;

import java.util.*;
import java.util.Map;

public class chap7_1_twoSum {

    //덧셈하여 타깃을 만들 수 있는 배열의 두 숫자 인덱스를 리턴하라. 정답은 항상 존재한다.
    public static void main(String[] args){
        
        int[] nums = {2,6,11,15};
        int target = 8;

        System.out.println("1번");
        for(int i : twoSum1(nums, target)){
            System.out.println(i);
        }

        System.out.println("2번");
        for(int i : twoSum2(nums, target)){
            System.out.println(i);
        }

        System.out.println("3번");
        for(int i : twoSum3(nums, target)){
            System.out.println(i);
        }

    }
    
    //해결 1. 브루트 포스 풀이, 속도가 느림 {O(n2)}
    public static int[] twoSum1(int[] nums, int target) {

        //배열을 첫번째 부터 순회하면서
        for(int i = 0; i < nums.length; i++){
            //두번째 i의 다음 요소랑 비교하면서 target에 해당하면 결과를 리턴
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] + nums[j] == target) {
                    return new int[]{i,j};
                }
            }
        }
        return null;
    }

    //해결 2. 브루트 포스 풀이에서 시간 복잡도 개선{상황 분석에 따른 시간복잡도는 O(1), 전체시간복잡도는O(n)}
    public static int[] twoSum2(int[] nums, int target) {

        Map<Integer, Integer> map = new HashMap<>();

        //배열을 map으로 변환, 키에 배열값을 넣고, 값에 배열 인덱스를 넣는다.
        for(int i = 0; i<nums.length; i++){
            map.put(nums[i], i);
        }

        for(int i = 0; i<nums.length; i++){
            //target에 순회하고자 하는 첫 수를 뺀 값으로 map에서 탐색한다. 단, 자신은(map.get(target - nums[i])) 정답에서 제외한다. 
            if(map.containsKey(target - nums[i]) && i != map.get(target - nums[i])){
                return new int[]{i, map.get(target - nums[i])};
            }
        }

        return null;
    }

    //해결 3. 해결2방법에서 for문 하나로 속도를 좀 더 개선, 동일한 O(n)에서 약간의 차이만 있음
    public static int[] twoSum3(int[] nums, int target) {

        Map<Integer, Integer> map = new HashMap<>();

        for(int i = 0; i<nums.length; i++){
            //target에 순회하고자 하는 첫 수를 뺀 값으로 map에서 탐색한다. 단, 자신은(map.get(target - nums[i])) 정답에서 제외한다. 
            if(map.containsKey(target - nums[i])){
                return new int[]{i, map.get(target - nums[i])};
            }
            //정답이 아니므로 맵의 키에 배열값과 값에 인덱스를 저장
            map.put(nums[i], i);
        }

        return null;
    }


} 
